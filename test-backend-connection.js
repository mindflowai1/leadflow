import axios from 'axios';

// Testar o backend do LeadFlow
const BACKEND_URL = 'https://leadflow-dtev.onrender.com';

async function testBackendConnection() {
  try {
    console.log('üîç Testando conectividade do backend...');
    console.log('üìç URL:', BACKEND_URL);
    
    // Teste 1: Health check
    console.log('\n1Ô∏è‚É£ Testando health check...');
    const healthResponse = await axios.get(`${BACKEND_URL}/api/health`);
    console.log('‚úÖ Health check OK:', healthResponse.status);
    console.log('üìÑ Resposta:', healthResponse.data);
    
    // Teste 2: Criar inst√¢ncia
    console.log('\n2Ô∏è‚É£ Testando cria√ß√£o de inst√¢ncia...');
    const testInstanceName = `test-${Date.now()}`;
    
    const createResponse = await axios.post(
      `${BACKEND_URL}/api/create-instance-and-qrcode`,
      {
        instanceName: testInstanceName,
        userName: 'test-user'
      },
      {
        headers: { 'Content-Type': 'application/json' },
        timeout: 15000
      }
    );
    
    console.log('‚úÖ Inst√¢ncia criada:', createResponse.data);
    
    // Teste 3: Buscar QR Code
    console.log('\n3Ô∏è‚É£ Testando busca de QR Code...');
    
    const qrResponse = await axios.get(
      `${BACKEND_URL}/api/qrcode/${testInstanceName}`,
      { timeout: 10000 }
    );
    
    console.log('‚úÖ QR Code response:', qrResponse.data);
    
    // Teste 4: Verificar estado da conex√£o
    console.log('\n4Ô∏è‚É£ Testando verifica√ß√£o de estado...');
    
    const stateResponse = await axios.get(
      `${BACKEND_URL}/api/connection-state/${testInstanceName}`,
      { timeout: 10000 }
    );
    
    console.log('‚úÖ Estado da conex√£o:', stateResponse.data);
    
    // Teste 5: Limpar inst√¢ncia
    console.log('\n5Ô∏è‚É£ Limpando inst√¢ncia de teste...');
    
    const deleteResponse = await axios.delete(
      `${BACKEND_URL}/api/delete-instance/${testInstanceName}`,
      { timeout: 10000 }
    );
    
    console.log('‚úÖ Inst√¢ncia deletada:', deleteResponse.data);
    
    console.log('\nüéâ Todos os testes do backend passaram!');
    
  } catch (error) {
    console.error('\n‚ùå Erro nos testes do backend:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data
    });
    
    if (error.response?.status === 500) {
      console.log('\nüí° Erro 500: Verifique os logs do backend para mais detalhes');
    } else if (error.code === 'ENOTFOUND') {
      console.log('\nüí° Dica: Verifique se a URL do backend est√° correta');
    }
  }
}

testBackendConnection(); 